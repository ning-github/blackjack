// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.Game = (function(superClass) {
  extend(Game, superClass);

  function Game() {
    return Game.__super__.constructor.apply(this, arguments);
  }

  Game.prototype.initialize = function() {
    var deck;
    this.set('deck', deck = new Deck());
    return this.listen();
  };

  Game.prototype.listen = function() {
    this.set('playerHand', this.get('deck').dealPlayer());
    this.set('dealerHand', this.get('deck').dealDealer());
    this.get('playerHand').on('busted', function() {
      console.log('you bustedddd, YOU LOSE');
      return this.listen();
    }, this);
    this.get('playerHand').on('stand', function() {
      return this.get('dealerHand').dealerPlay();
    }, this);
    this.get('dealerHand').on('busted', function() {
      console.log('dealer busted, YOU WIN!!');
      return this.listen();
    }, this);
    return this.get('dealerHand').on('stand', function() {
      var dealerScore, playerScore;
      playerScore = this.get('playerHand').bestScore();
      dealerScore = this.get('dealerHand').bestScore();
      if (playerScore > dealerScore) {
        console.log('your hand is higher! YOU WIN');
      }
      if (playerScore === dealerScore) {
        console.log('push');
      }
      if (playerScore < dealerScore) {
        console.log('your hand is lower. YOU LOSE');
      }
      return this.listen();
    }, this);
  };

  return Game;

})(Backbone.Model);
